#!/usr/bin/env node

/*!
 * Nitrus
 * Copyright(c) 2013 Delmo Carrozzo <dcardev@gmail.com>
 * MIT Licensed
 */

/**
  * Module dependencies.
  */
var fs = require('fs')
  , nitrus = require('../lib/nitrus')
  , io = require('../lib/utils/io')
  , cmd = require('../lib/utils/cmdprompt');

/*
 * Proccess arguments
 */
var args = process.argv.slice(2);

/**
 * Input/output path
 */
var path = '.';

/**
 * An action to call 
 *    like: init, apply, make, install, add
 */
var action = ''

/**
 * Preceded by an `action`
 *    like: project, package
 */
var current = '';    

/**
 * Contains the name of project or package that will be
 * depends of `action`
 *    like: all, <packagename>
 */
var name = '';

/**
 * Override an exist file or folder depends of `action`
 */
var withForce = false;

// usage docs.
var usage = [
    ''
  , '  Usage: nitrus <command>'
  , ''
  , '  where <command> is one of:'
  , '        init, apply, pack, install, add'
  , ''
  , ''
  , '  Options:'
  , ''
  , '    -v, --version             Display a version of Nitrus'
  , '    -h, --help                Display this text'
  , ''
  , '    --engine                  Display the name of template engine'
  , '    --force                   Force override'
  , ''
].join('\n');

// give me args
if (!args.length) { cmd.abort(usage); }

// procces args
var arg;
while (args.length) {
  arg = args.shift();
  switch (arg) {
    case '-h':
    case '--help':
      cmd.abort(usage);
    case '-v':
    case '--version':
      cmd.abort(nitrus.version);
      break;
    case '--engine':
      cmd.abort(nitrus.config.engine);
      break;
    case '--force':
      withForce = true;
      break;
    case 'init':
      action = 'init';
      (args.length >= 2) 
        ? (current = args.shift(), name = args.shift())
        : cmd.abort('init requires two argument');
      break;
    case 'pack':
      action = 'pack';
      (args.length) 
        ? (name = args.shift())
        : cmd.abort('pack requires an argument');
    break;
    case 'apply':
      action = 'apply';
      (args.length) 
        ? (name = args.shift())
        : cmd.abort('apply requires an argument');
    break;
    case 'install':
      action = 'install';
      (args.length) 
        ? (name = args.shift())
        : cmd.abort('install requires an argument');
    break;
    case 'add':
      action = 'add';
      (args.length) 
        ? (name = args.shift())
        : cmd.abort('add requires an argument');
    break;
    default:
      path = arg;
  }
}

// 
// check the action
if ( !(/^(init|apply|pack|install|add)$/i).test(action) ) {
  console.log('the action `' + action + '` was not found.');
  cmd.abort(usage);
}

// check the instruction
if ( (/^init$/i).test(action) && !(/^(project|package)$/i).test(current) ) {
  console.log('the instruction `' + action, current + '` was not found.');
  cmd.abort(usage);
}


// check if is a valid name
if ( !(/^(all|[a-zA-Z0-9_\-]+)$/i).test(name) ) {
  console.log('the instruction `' + action, current, name + '` was not found.');
  cmd.abort(usage);
}

// options
var options = {
    action: action
  , current: current
  , name: name
  , path: path 
  , withForce: withForce
};

// just do it
(function(nitrus, ops){
  
  // options to send
  var sops = {};
  sops.force = ops.withForce || false;
  sops.name = name;

  // the function will be executed
  // if something wrong abort with a Unexpected error
  var befn = function() {
    cmd.abort('Unexpected error.');
  };

  // the ending function
  var endfn = function(err) { 
     if (err) {
        cmd.abort(err); 
     }

     console.log('ready!');
  }

  var   needCheck = false          // to check if the `path` need overrides
      , pathCheck = ops.path;      // the `path` to check
      
  switch (action) {
    case 'init':
      needCheck = !ops.withForce;
      sops.output = pathCheck = path;

      befn = (current == 'project')
                ? nitrus.initProject 
                : nitrus.initPackage

    break;
    case 'pack':
      sops.input = path;
      befn = nitrus.pack;
    break;
    case 'apply':
      sops.input = path;
      sops.output = path;
      befn =  nitrus.apply;
    break;
    case 'install':
      needCheck = !ops.withForce;
      sops.output = path;
      pathCheck = path + '/nitrus/packages/' + name;

      befn = nitrus.install;
    break;
    case 'add':
      needCheck = !ops.withForce;
      sops.output = path;
      pathCheck = path + '/nitrus/packages/' + name;
      befn = packager.add;
    break;
    default:
      cmd.abort('Oop! the action `' + current + action + '` was not expected.');
  }

  if (needCheck) {

    io.emptyDirectory(pathCheck, function(empty){
      if (empty) {
        befn.apply(nitrus, [sops, endfn]);
      } else {
        cmd.confirm('destination is not empty, continue? ', function(ok){
          if (ok) {
            process.stdin.destroy();

            sops.force = true;
            befn.apply(nitrus, [sops, endfn]);
          } else {
            cmd.abort('aborted');
          }
        });
      }
    });

  } else {
    befn.apply(nitrus, [sops, endfn]);
  }

})(nitrus, options)